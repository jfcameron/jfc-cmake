#
# This file is GENERATED from @JFC_LIBRARY_PROJECT_TEMPLATE_ABSOLUTE_PATH@. Do not edit this file directly
#

project("@NAME_value@"
    VERSION "@VERSION_value@" 
    DESCRIPTION "@DESCRIPTION_value@")

add_library(${PROJECT_NAME} @TYPE_value@
    @SOURCE_LIST_value@)

target_include_directories(${PROJECT_NAME} PRIVATE
    ${PROJECT_BINARY_DIR}/generatedinclude/
    @PUBLIC_INCLUDE_DIRECTORIES_value@
    @PRIVATE_INCLUDE_DIRECTORIES_value@)

set_target_properties(${PROJECT_NAME} PROPERTIES RULE_LAUNCH_COMPILE "${CMAKE_COMMAND} -E time")

set_property(TARGET ${PROJECT_NAME} PROPERTY C_STANDARD @C_STANDARD_value@)
set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD @C++_STANDARD_value@)

set(${PROJECT_NAME}_INCLUDE_DIRECTORIES
    ${PROJECT_BINARY_DIR}/generatedinclude/
    @PUBLIC_INCLUDE_DIRECTORIES_value@
    CACHE PATH "${PROJECT_NAME}_INCLUDE_DIRECTORIES: these are the include directories that must be included in downstream projects" FORCE)
    
set_target_properties(${PROJECT_NAME} PROPERTIES PREFIX "lib")

# constructing the lib output's filename
get_property(_prefix TARGET ${PROJECT_NAME} PROPERTY PREFIX)
get_property(_suffix TARGET ${PROJECT_NAME} PROPERTY SUFFIX)
get_property(_type TARGET ${PROJECT_NAME} PROPERTY TYPE)

if ("${_type}" STREQUAL STATIC_LIBRARY)
    set(_fileType "${CMAKE_STATIC_LIBRARY_SUFFIX}")
elseif ("${_type}" STREQUAL SHARED_LIBRARY)
    set(_fileType "${CMAKE_SHARED_LIBRARY_SUFFIX}")
endif()

set(_LibraryOutputName "${_prefix}${PROJECT_NAME}${_suffix}${_fileType}")

set(${PROJECT_NAME}_LIBRARIES
    "${PROJECT_BINARY_DIR}/${_LibraryOutputName}"
    @LIBRARIES_value@
    CACHE PATH "${PROJECT_NAME}_LIBRARIES: these are the binary files that must be included in downstream projects" FORCE)

add_custom_command(TARGET ${PROJECT_NAME} 
    POST_BUILD
        COMMAND 
            ${CMAKE_COMMAND} -E echo "Output: $<TARGET_FILE:${PROJECT_NAME}>")

add_custom_command(TARGET ${PROJECT_NAME} #this is a workaround for xcode and vs: you end up with a built .a in debug/release dir plus and a copy at the same level for the LIB cache varaibles
    POST_BUILD
        COMMAND 
            ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${PROJECT_NAME}> "${PROJECT_BINARY_DIR}/$<TARGET_FILE_NAME:${PROJECT_NAME}>"
)

#####

jfc_generate_cmake_header()
jfc_apply_standard_compile_and_link_flags("${PROJECT_NAME}" ${JFC_BUILD_TYPE})

#
# This file is GENERATED from @JFC_LIBRARY_PROJECT_TEMPLATE_ABSOLUTE_PATH@. Do not edit this file directly
#
